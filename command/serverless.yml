# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: command
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221

# you can overwrite defaults here
#  stage: dev
  region: us-east-2
  vpc:
    securityGroupIds:
      - sg-0bf048bba2ffab140
      - sg-086dbca6f18eb499e
    subnetIds:
      - subnet-0bd2b902b764ad6b1
      - subnet-07699f487086588cd
  deploymentBucket:
    name: dispag-code

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  #==> COMMAND
  command-novodebito:
        name: command-novodebito-lb
        handler: command/novodebito-handler.novodebito
        events:
            - http:
                method: post
                path: command/novodebito

  command-pagardebito:
        name: command-pagardebito-lb
        handler: command/pagardebito-handler.pagardebito
        events:
            - http:
                method: post
                path: command/pagardebito

  command-excluirdebito:
        name: command-excluirdebito-lb
        handler: command/excluirdebito-handler.excluirdebito
        events:
            - http:
                method: delete
                path: command/excluirdebito

  command-novoorcamento:
        name: command-novoorcamento-lb
        handler: command/novoorcamento-handler.novoorcamento
        events:
            - http:
                method: post
                path: command/novoorcamento

  command-excluirorcamento:
        name: command-excluirorcamento-lb
        handler: command/excluirorcamento-handler.excluirorcamento
        events:
            - http:
                method: delete
                path: command/excluirorcamento
  #==> AUTH
  auth:
        name: auth-lb
        handler: auth/auth-handler.login
        events:
            - http:
                method: post
                path: auth/login

  #==> QUERY
  query-saldos-debitos-no-mes:
        name: saldosdebitosnomes-lb
        handler: query/debitos-handler.saldosmes
        events:
            - http:
                method: post
                path: query/saldos/debitos/no/mes

  query-detalhes-debitos-no-mes:
        name: detahesdebitosnomes-lb
        handler: query/debitos-handler.datelhes
        events:
            - http:
                method: post
                path: query/datelhes/debitos/no/mes

  query-orcamento-no-mes:
        name: orcamentoanomes-lb
        handler: query/orcamento-handler.orcamentoanomes
        events:
            - http:
                method: post
                path: query/orcamento/no/mes  
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
      - serverless-offline
      - serverless-plugin-typescript
      - serverless-dotenv-plugin
